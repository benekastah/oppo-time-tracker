(def (get-time-spent-for-row row)
  (let (in (:time_in row)
        out (or (:time_out row) (.now Date)))
    (- out in)))

(def (get-total-time-spent timestamps)
  (let (time-spent (map get-time-spent-for-row timestamps))
    (reduce + time-spent)))

(def bill-period-length (* 2 7 24 60 60 1000))
(def (rec-get-billing-periods timestamps groups pstart)
  (let (entry (first timestamps)
        others (rest timestamps)
        end (if entry (:time_out entry))
        current-group (last groups))
    (if (and (< (- end pstart) bill-period-length) (:length timestamps))
      (let (grps (init groups)
            c-group (push current-group entry))
        (rec-get-billing-periods others (push grps c-group) pstart))
      (let (new-pstart (+ pstart bill_period_length)
            c-group (merge current-group {:total_time_spent (get-total-time-spent current-group)})
            grps (push (init groups) c-group (if entry [entry] nil)))
        (if (not (:length timestamps))
          (filter (lambda (a) (and a (:length a))) grps)
          (rec-get-billing-periods others grps new-pstart))))))

(def (get-billing-periods timestamps)
  (let (t (or timestamps [])
        first-stamp (or (first t) {})
        pstart (or (:time_in first-stamp) 0))
    (rec-get-billing-periods t [[]] pstart)))