
(def (leading-zero n digits)
  (let (s-n (str n)
        len (@s-n :length)
        d (or digits 2))
    (if (>= len d)
      s-n
      (leading-zero (str 0 s-n) d))))

(def (display-date date-string)
  (let (d (new Date date-string)
        month (leading-zero (+ 1 (.getMonth d)))
        date (leading-zero (.getDate d))
        year (leading-zero (.getFullYear d) 4)
        n-hours (.getHours d)
        hours (leading-zero (if (> n-hours 12) (- n-hours 12) n-hours))
        minutes (leading-zero (.getMinutes d))
        ampm (if (< n-hours 12) "am" "pm"))
    (str month "/" date "/" year " " hours ":" minutes " " ampm)))

(def (display-time-spent n)
  (let (seconds (/ n 1000)
        minutes (/ seconds 60)
        hours (/ minutes 60))
    (concat "" (.toFixed hours 1) " hours")))

(def (reload) (.reload location))

(def (set-editable evt)
  (let (el ($ (js-eval :this))
        row (.parents el "tr:first")
        time-in ($ ".time-in" row)
        time-out ($ ".time-out" row)
        description ($ ".description" row)
        in (.data time-in :value)
        out (.data time-out :value))
    (.show ($ ".save-edits" row))
    (.show ($ ".cancel-edits" row))
    (.hide ($ ".edit-timestamps" row))
    (.attr (.add (.add time-in time-out) description) {:contenteditable true})
    (.html time-in in)
    (.html time-out out)))

(def (edit-timestamps evt)
  (let (el ($ (js-eval "this"))
        row (.parents el "tr:first")
        time-in ($ ".time-in" row)
        time-out ($ ".time-out" row)
        description ($ ".description" row)
        id (.data row :id)
        in (encodeURIComponent (.html time-in))
        out (encodeURIComponent (.html time-out))
        desc (.html description))
    (puts id in out)
    (.post $
      (concat "/update-timestamps/" id "/" in "/" out)
      {:description desc}
      reload)))

(def (delete-timestamps evt)
  (let (really? (confirm "Are you sure you want to delete this entry? This cannot be undone.")
        el ($ (js-eval :this))
        row (.parents el "tr:first")
        id (.data row :id))    
    (if really?
      (.post $
        (concat "/delete-timestamps/" id)
        reload))))

(def (create-project evt)
  (let (project-name (prompt "Name your project:"))
    (.post $
      (concat "/create-project/" project-name)
      reload)))

(def (delete-project evt)
  (let (really? (confirm "Are you sure you want to delete this project? This cannot be undone.")
        el ($ (js-eval :this))
        id (.data el :id))
    (if really?
      (.post $
        (concat "/delete-project/" id)
        reload))))

(def (get-description evt)
  (let (this (js-eval :this)
        punching-in (Number (.val ($ "[name=punching-in]" this)))
        description (if (not punching-in) (prompt "What did you work on during this time?") ""))
    (if (and (not punching-in) (not description))
      (.preventDefault evt)
      (.val ($ "[name=description]" this) description))))

(.ready ($ document) (lambda ()
  (def time-in-out ($ ".time-in, .time-out"))
  (.each time-in-out (lambda (index el)
    (let (d (@el :innerHTML)
          $el ($ el))
      (if d
        (do
          (.html $el (display-date d))
          (.attr $el "data-value" d)))
      nil)))
  (def time-spent ($ ".total-time-spent"))
  (.each time-spent (lambda ()
    (let (el ($ (js-eval :this)))
      (.html el (display-time-spent (.html el))))))

  (.submit ($ "form.punch-in-out-form") get-description)
  (.click ($ ".edit-timestamps") set-editable)
  (.click ($ ".delete-timestamps") delete-timestamps)
  (.click ($ ".save-edits") edit-timestamps)
  (.click ($ ".cancel-edits") reload)
  (.click ($ "#create-project") create-project)
  (.click ($ "button.delete-project") delete-project)))

